# STAT 165 Final Project

## *Southwest Airlines Baggage Fees Effects on Passenger Volume*

## *Forecast for June 2025*

### Group Members: Ari Hadjiyianni, Assmaa Aziz, Evan Vlahos

```{r}
library(ggplot2)
library(dplyr)
library(tidyverse)
library(boot)

options(warn=0)
```

## Fermi Estimation

By Evan Vlahos

### Load all data

```{r}
# Vector that contains the major airlines that we have data for
airlines = c("Alaska", "Frontier", "JetBlue", "Southwest", "Spirit")
months = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Now setup the translation vector - essentially a lookup table
names(months) <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
seasons = c("Winter", "Winter", "Spring", "Spring", "Spring", "Summer", "Summer", "Summer", "Fall", "Fall", "Fall", "Winter")
names(seasons) <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
quarter_str = c("Q1", "Q2", "Q3", "Q4")
quarters = c(1,2,3,4)
```

```{r}
suppressWarnings({
  
# Reading Flight Data
flights_data = data.frame()
# Looping through our airlines vector to extract the flight data
for(i in 1:length(airlines))
{
  # Making the path to the file for each of the airlines
  airline_file = paste("US-Airline-Flights/",airlines[i],"Flights.csv", sep="")
  # Read the file
  df = read.csv(airline_file)
  # Remove the incomplete years from the dataframe
  df <- df %>%
    filter((Year > 2002 & Year < 2020) | (Year > 2022))
  # Make a column for the Airline string
  df["Airline"] = airlines[i]
  df$MonthName <- months[as.character(df$Month)]
  df$MonthName <- factor(df$MonthName, levels = months)
  df$Season <- seasons[as.character(df$Month)]
  df$Year <- as.integer(gsub(",", "", df$Year))
  df$TOTAL <- as.numeric(gsub(",", "", df$TOTAL))
  df$DOMESTIC <- as.numeric(gsub(",", "", df$DOMESTIC))
  df$INTERNATIONAL <- as.numeric(gsub(",", "", df$INTERNATIONAL))
  # Append the df dataframe to the flights_data dataframe
  flights_data = rbind(flights_data, df)
}

})
```

```{r}
# Reading Passenger Data
passengers_data = data.frame()
# Looping through our airlines vector to extract the passenger data
for(i in 1:length(airlines))
{
  # Making the path to the file for each of the airlines
  airline_file = paste("US-Airline-Passengers/",airlines[i],"Passengers.csv", sep="")
  # Read the file
  df = read.csv(airline_file)
  # Remove the incomplete years from the dataframe
  df <- df %>%
    filter((Year > 2002 & Year < 2020) | (Year > 2022))
  # Make a column for the Airline string
  df["Airline"] = airlines[i]
  df$MonthName <- months[as.character(df$Month)]
  df$MonthName <- factor(df$MonthName, levels = months)
  df$Season <- seasons[as.character(df$Month)]
  df$TOTAL <- as.numeric(gsub(",", "", df$TOTAL))
  df$DOMESTIC <- as.numeric(gsub(",", "", df$DOMESTIC))
  df$INTERNATIONAL <- as.numeric(gsub(",", "", df$INTERNATIONAL))
  # Append the df dataframe to the passengers_data dataframe
  passengers_data = rbind(passengers_data, df)
}

```

```{r}
# Reading Available Seat Miles Data
available_seat_miles_data = data.frame()
# Looping through our airlines vector to extract the available seat mile data
for(i in 1:length(airlines))
{
  # Making the path to the file for each of the airlines
  airline_file = paste("US-Airline-Available-Seat-Miles/",airlines[i],"_ASM.csv", sep="")
  # Read the file
  df = read.csv(airline_file)
  # Remove the incomplete years from the dataframe
  df <- df %>%
    filter((Year > 2002 & Year < 2020) | (Year > 2022))
  # Make a column for the Airline string
  df["Airline"] = airlines[i]
  df$MonthName <- months[as.character(df$Month)]
  df$MonthName <- factor(df$MonthName, levels = months)
  df$Season <- seasons[as.character(df$Month)]
  df$Year <- as.integer(gsub(",", "", df$Year))
  df$TOTAL <- as.numeric(gsub(",", "", df$TOTAL))
  df$DOMESTIC <- as.numeric(gsub(",", "", df$DOMESTIC))
  df$INTERNATIONAL <- as.numeric(gsub(",", "", df$INTERNATIONAL))
  # Append the df dataframe to the flights_data dataframe
  available_seat_miles_data = rbind(available_seat_miles_data, df)
}
 
```

```{r}
# Reading Net Income Data
net_income_data = data.frame()
# Looping through our airlines vector to extract the net income data
for(i in 1:length(airlines))
{
  # Making the path to the file for each of the airlines
  airline_file = paste("US-Airline-Net-Income/",airlines[i],"_NI.csv", sep="")
  # Read the file
  df = read.csv(airline_file)
  # Remove the incomplete years from the dataframe
  df <- df %>%
    filter((Year > 2002 & Year < 2020) | (Year > 2022))
 # Make a column for the Airline string
  df["Airline"] = airlines[i]
  df$Quarter <- factor(df$Quarter, levels = quarters)
  df$Year <- as.integer(gsub(",", "", df$Year))
  df$TOTAL <- as.numeric(gsub(",", "", df$TOTAL))
  df$DOMESTIC <- as.numeric(gsub(",", "", df$DOMESTIC))
  df$LATIN.AMERICA <- as.numeric(gsub(",", "", df$LATIN.AMERICA))
  df$ATLANTIC <- as.numeric(gsub(",", "", df$ATLANTIC))
  df$PACIFIC <- as.numeric(gsub(",", "", df$PACIFIC))
  # Append the df dataframe to the flights_data dataframe
  net_income_data = rbind(net_income_data, df)
}

```

```{r}
# Reading Operating Revenue Data
operating_revenue_data = data.frame()
# Looping through our airlines vector to extract the net income data
for(i in 1:length(airlines))
{
  # Making the path to the file for each of the airlines
  airline_file = paste("US-Airline-Operating-Revenue/",airlines[i],"_OR.csv", sep="")
  # Read the file
  df = read.csv(airline_file)
  # Remove the incomplete years from the dataframe
  df <- df %>%
    filter((Year > 2002 & Year < 2020) | (Year > 2022))
  # Make a column for the Airline string
  df["Airline"] = airlines[i]
  df$Quarter <- factor(df$Quarter, levels = quarters)
  df$Year <- as.integer(gsub(",", "", df$Year))
  df$TOTAL <- as.numeric(gsub(",", "", df$TOTAL))
  df$DOMESTIC <- as.numeric(gsub(",", "", df$DOMESTIC))
  df$LATIN.AMERICA <- as.numeric(gsub(",", "", df$LATIN.AMERICA))
  df$ATLANTIC <- as.numeric(gsub(",", "", df$ATLANTIC))
  df$PACIFIC <- as.numeric(gsub(",", "", df$PACIFIC))
  # Append the df dataframe to the flights_data dataframe
  operating_revenue_data = rbind(operating_revenue_data, df)
}
 
```

```{r}
# Reading Revenue Passenger Miles Data
revenue_passenger_miles_data = data.frame()
# Looping through our airlines vector to extract the load factor data
for(i in 1:length(airlines))
{
  # Making the path to the file for each of the airlines
  airline_file = paste("US-Airline-Revenue-Passenger-Miles/",airlines[i],"_RPM.csv", sep="")
  # Read the file
  df = read.csv(airline_file)
  # Remove the incomplete years from the dataframe
  df <- df %>%
    filter((Year > 2002 & Year < 2020) | (Year > 2022))
  # Make a column for the Airline string
  df["Airline"] = airlines[i]
  df$MonthName <- months[as.character(df$Month)]
  df$MonthName <- factor(df$MonthName, levels = months)
  df$Season <- seasons[as.character(df$Month)]
  df$TOTAL <- as.numeric(gsub(",", "", df$TOTAL))
  df$DOMESTIC <- as.numeric(gsub(",", "", df$DOMESTIC))
  df$INTERNATIONAL <- as.numeric(gsub(",", "", df$INTERNATIONAL))
  # Append the df dataframe to the passengers_data dataframe
  revenue_passenger_miles_data = rbind(revenue_passenger_miles_data, df)
}

```

### Create plots to visualize data

```{r}
# Number of passengers per airline per year grouped by the airlines
ggplot(data = passengers_data, aes(x = MonthName, y = TOTAL/1000000, group = Year)) + 
    geom_line(aes(color=as.character(Year))) +
    facet_wrap(~Airline) +
    labs(title="Number of Passengers (ex-COVID)",
        x ="Year", y = "Total (in millions)") +
    theme(axis.text.x = element_text(angle=90))

```

```{r}
# Annual passengers
annual_pass_data <- passengers_data %>% group_by(Year, Airline) %>% summarize(AnnualPassengers = sum(TOTAL))
```

```{r}
grph <- annual_pass_data %>%  
  filter(Year >= 2006 & Year <= 2019) %>%
  ggplot(aes(x = Year, y = AnnualPassengers / 1000000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="2006-2019 Annual Passenger Count",
        x ="Year", y = "Total (in millions)") + 
    theme(axis.text.x = element_text(angle=90))

print(grph)
```

### June data for all airlines

```{r}
# data for June
month_value = 6 

passengers_data %>% filter(Month == month_value ) %>% ggplot(aes(x = Year, y = TOTAL/1000000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title=paste(months[month_value], " Passengers per year",sep=""),
        x ="Year", y = "Total (in millions)") + 
    theme(axis.text.x = element_text(angle=90))

```

```{r}
# Calculating passengers per flight
passenger_dataset <- passengers_data[c("Year", "Month", "Airline", "TOTAL")]
flight_dataset <- flights_data[c("Year", "Month", "Airline", "TOTAL")]
pass_flight <- inner_join(passenger_dataset, flight_dataset, by = c("Year", "Month", "Airline"), suffix = c(".passengers", ".flights"))
pass_flight$pass_flight_ratio = pass_flight$TOTAL.passengers / pass_flight$TOTAL.flights
```

```{r}
# data for June
month_value = 6

grph <- pass_flight %>% filter(Month == month_value ) %>% ggplot(aes(x = Year, y = pass_flight_ratio, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title=paste("Passengers per Flight for ", months[month_value], sep=""),
        x ="Year", y = "Total") + 
    theme(axis.text.x = element_text(angle=90))

print(grph)

```

```{r}
# available seat miles
month_value = 6

grph <- available_seat_miles_data %>% filter(Month == month_value ) %>% ggplot(aes(x = Year, y = TOTAL/1000000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title=paste("Available Seat Miles for ", months[month_value], sep=""),
        x ="Year", y = "Total (in millions)") + 
    theme(axis.text.x = element_text(angle=90))

print(grph)

```

### Annualized Data

```{r}
# Net Income
annual_net_data <- net_income_data %>% group_by(Year, Airline) %>% summarize(AnnualNet = sum(TOTAL))
```

```{r}
# Plotting the Net Income of each airline
grph <- annual_net_data %>%  
  filter(Year >= 2015) %>%
  ggplot(aes(x = Year, y = AnnualNet / 1000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="Net income since 2015 (ex-COVID)",
        x ="Year", y = "Total (in millions)") + 
    theme(axis.text.x = element_text(angle=90))

print(grph)
```

```{r}
annual_revenue_data <- operating_revenue_data %>% filter(Year <= 2024) %>% group_by(Year, Airline) %>% summarize(AnnualTotal = sum(TOTAL)*1000)
```

```{r}
# Operating revenue 

grph <- annual_revenue_data %>%  ggplot(aes(x = Year, y = AnnualTotal/1000000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="Operating revenue",
        x ="Year", y = "Total (in millions)") + 
    theme(axis.text.x = element_text(angle=90))

print(grph)
```

```{r}
annual_passenger_data <- passengers_data %>% filter(Year <= 2024) %>% group_by(Year, Airline) %>% summarize(AnnualTotal = sum(TOTAL))
```

```{r}
grph <- annual_passenger_data %>%  ggplot(aes(x = Year, y = AnnualTotal / 1000000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="Annual Number of Passengers",
        x ="Year", y = "Number of Passengers (in millions)") + 
    theme(axis.text.x = element_text(angle=90))
print(grph)
```

```{r}
annual_pass_flight_ratio <- pass_flight %>% filter(Year <= 2024) %>% group_by(Year, Airline) %>% summarize(AnnualTotal = mean(pass_flight_ratio))
```

```{r}
grph <- annual_pass_flight_ratio %>%  ggplot(aes(x = Year, y = AnnualTotal, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="Annualized Passengers per Flight",
        x ="Year", y = "Passengers per Flight") + 
    theme(axis.text.x = element_text(angle=90))
print(grph)
```

```{r}
annual_revenue_passenger_data <- annual_revenue_data
annual_revenue_passenger_data$Revenue_Per_Passenger <- (annual_revenue_data$AnnualTotal) / (annual_passenger_data$AnnualTotal)
```

```{r}
grph <- annual_revenue_passenger_data %>%  ggplot(aes(x = Year, y = Revenue_Per_Passenger, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="Revenue per Passenger",
        x ="Year", y = "Revenue per Passenger (in $)") + 
    theme(axis.text.x = element_text(angle=90))
print(grph)
```

```{r}
annual_asm <- available_seat_miles_data %>% filter(Year <= 2024) %>% group_by(Year, Airline) %>% summarize(AnnualTotal = mean(TOTAL))
```

```{r}
# Plot Annual Available Seat Miles
grph <- annual_asm %>%  ggplot(aes(x = Year, y = AnnualTotal/1000000, group = Airline)) + 
    geom_line(aes(color=Airline)) +
    facet_wrap(~Airline) +
    labs(title="Annualized Available Seat Miles ",
        x ="Year", y = "Available Seat Miles (in millions)") + 
    theme(axis.text.x = element_text(angle=90))
print(grph)
```

```{r}
# Year over Year passengers in June for Southwest - 2023 to 2024
jun_southwest_passengers2024 <- passengers_data %>% filter(Airline == "Southwest" & Year %in% c(2023, 2024) & Month == 6)
jun_southwest_passengers2024
```

```{r}
# Year over Year passengers in June for Southwest - 2014 to 2015
jun_southwest_passengers2015 <- passengers_data %>% filter(Airline == "Southwest" & Year %in% c(2014, 2015) & Month == 6)
jun_southwest_passengers2015
```

```{r}
# Year over Year passengers in June for JetBlue
jun_jetblue_passengers2024 <- passengers_data %>% filter(Airline == "JetBlue" & Year %in% c(2023, 2024) & Month == 6)
jun_jetblue_passengers2024
```

```{r}
# Year over Year passengers in June for JetBlue
jun_jetblue_passengers2015 <- passengers_data %>% filter(Airline == "JetBlue" & Year %in% c(2014, 2015) & Month == 6)
jun_jetblue_passengers2015
```

```{r}
# Calculating JetBlue's Growth Factor from 2014 to 2015
jetblue_growth = ((jun_jetblue_passengers2015$TOTAL[2] / jun_jetblue_passengers2015$TOTAL[1]) - 1) * 100
print(paste0("JetBlue's Growth Rate (2014-2015): ", round(jetblue_growth, digits = 2), "%", sep=""))
```

```{r}
# Calculating JetBlue's Growth Factor from 2023 to 2024
jetblue_growth2 = ((jun_jetblue_passengers2024$TOTAL[2] / jun_jetblue_passengers2024$TOTAL[1]) - 1) * 100
print(paste0("JetBlue's Growth Rate (2023-2024): ", round(jetblue_growth2, digits = 2), "%", sep=""))
```

```{r}
# Calculating Southwest's Growth Factor from 2014 to 2015
southwest_growth = ((jun_southwest_passengers2015$TOTAL[2] / jun_southwest_passengers2015$TOTAL[1]) - 1) * 100
print(paste0("Southwest's Growth Rate (2014-2015): ", round(southwest_growth, digits = 2), "%", sep=""))
```

```{r}
# Calculating Southwest's Growth Factor from 2023 to 2024
southwest_growth2 = ((jun_southwest_passengers2024$TOTAL[2] / jun_southwest_passengers2024$TOTAL[1]) - 1) * 100
print(paste0("Southwest's Growth Rate (2023-2024): ", round(southwest_growth2, digits = 2), "%", sep=""))
```

### AIRLINE EVENTS

-   Frontier \@ 2006 : Holiday travel system problems
-   Frontier \@ 2014 : Customer anger over delays and cancellations, low quality score
-   JetBlue \@ 2005 : Redoing their business model after passengers voiced frustrations over paying high prices for fares and having flights delayed by slowdowns
-   Southwest \@ 2011 : Slowly recovering from 2008 recession
-   Spirit \@ 2013 : Lead in passenger complaints among the airline industry


## Finding a Base Estimate Using Reference Classes

By Assmaa Aziz

```{r}
#For each reference class, we are looking at the change in the number of 
#passengers after the implementation of the new policy. If we see the same 
#trend among all airlines during the same time period, then we can conclude 
#the change is likely due to outside factors that affect all airlines. However, 
#if we see a different trend only in the airline with the policy change, we can 
#conclude the effect is likely due to the policy change.

#Based on how these changes affected these comparable airlines with similar 
#policy changes, we'll form a base estimate.
```

## May-June:

## Percent Change from May to June for Each Year Since Policy Implementation

```{r}
passengers_data_refcl = passengers_data %>% filter(Year <= 2024) %>%
  filter(Airline %in% c('JetBlue', 'Frontier', 'Spirit', 'Alaska',
                          'Southwest')) %>% filter(Month %in% c(5,6)) %>%
  select(Year, Month, TOTAL, Airline, MonthName)

#May-June passenger data after implementing the new baggage policy for 
#each respective airline.
#(Alaska: May 2010, Spirit: Aug 2010, Frontier: April 2014, JetBlue: June 2015)
spirit_2010 = passengers_data_refcl %>% filter(Airline == 'Spirit') %>% 
  filter(Year >= 2011)
alaska_2010 =  passengers_data_refcl %>% filter(Airline == 'Alaska') %>% 
  filter(Year >= 2010)
jetblue_2015 = passengers_data_refcl %>% filter(Airline == 'JetBlue') %>%
  filter(Year >= 2015)
frontier_2014 = passengers_data_refcl %>% filter(Airline == 'Frontier') %>% 
  filter(Year >= 2014)

#Find the percent change of an airline for each year.
may_vs_june_pc = function(df) {
 df %>% group_by(Year, Airline, MonthName) %>% summarize(total = sum(TOTAL)) %>% 
    pivot_wider(names_from = MonthName, values_from = total) %>% 
    mutate(diff = Jun - May, percent_change = ((Jun - May) / May )* 100)
}

spirit_pc = may_vs_june_pc(spirit_2010)
alaska_pc = may_vs_june_pc(alaska_2010)
jetblue_pc = may_vs_june_pc(jetblue_2015)
frontier_pc = may_vs_june_pc(frontier_2014)
head(spirit_pc, 5)
 
#Visualizations
jetblue_plot = ggplot(jetblue_pc, aes(x = factor(Year), y = percent_change)) +
geom_col() + labs (title = 'JetBlue % Change in Passengers (From May to June) 
After Policy Change', x = 'Year', y = '% Change')

spirit_plot = ggplot(spirit_pc, aes(x = factor(Year), y = percent_change)) + 
geom_col() + labs (title = 'Spirit % Change in Passengers (From May to June) 
After Policy Change', x = 'Year', y = '% Change')

frontier_plot = ggplot(frontier_pc, aes(x = factor(Year), y = percent_change)) + 
geom_col() + labs (title = 'Frontier % Change in Passengers (From May to June) 
After Policy Change', x = 'Year', y = '% Change')

alaska_plot = ggplot(alaska_pc, aes(x = factor(Year), y = percent_change)) + 
geom_col() + labs (title = 'Alaska % Change in Passengers (From May to June)
After Policy Change', x = 'Year', y = '% Change') 

jetblue_plot
spirit_plot
frontier_plot
alaska_plot
```

## May-June: Observations

```{r}
#JetBlue
#Since implementing their policy change, JetBlue experienced a negative 
#percent change in passenger volume from May to June in 2019 and 2023. 
#A decline in the number of passengers from May to June occurred 2 out 
#of 7 years.

#Spirit
#Since implementing their policy change, Spirit experienced a negative percent
#change in passenger volume from May to June in 2011, 2015, and 2023. A 
#decline in the number of passengers from May to June occurred 3 out
#of 11 years.

#Frontier and Alaska
#Frontier and Alaska only experience positive percent change, meaning every 
#year since implementing their respective policy changes, both airlines 
#experience an increase in the number of passengers from May to June. 
#These airlines experienced a decline in the number of passengers from May 
#to June 0 out of 8 years (Frontier) and 0 out of 12 years (Alaska).
```

## May-June: Base Estimate

```{r}
#Base Estimate
num_years = length(spirit_pc$Year) + length(jetblue_pc$Year) + 
  length(frontier_pc$Year) + length(alaska_pc$Year)

num_decline_may_to_june = 2 + 3 + 0 + 0

ref_cl_est = num_decline_may_to_june/num_years
cat('base estimate:', ref_cl_est)

#From 38 observations we found a decline in the number of passengers 
#from May to June occurred 5 times. We use this as a base estimate, 5/38.
```

## May-June: Updating This Estimate to Include the Impact of Public Backlash

```{r}
#For the reference classes we analyzed, their policy changes occurred before
#the rise of modern social media, so this factor likely didn't apply to them.

#Public backlash through social media could amplify negative sentiment and
#consumers could show their dissatisfaction for these policy changes by
#boycotting the airline.
```

```{r}
set.seed(100)
#Our base estimate that there will be a decrease in total passengers from
#May 2025 to June 2025 for Southwest after the policy changes.
base_est = ref_cl_est

#Whether there will be a low, medium, or high level of public backlash.
levels = c('low', 'medium','high')

#Our belief of the probability each level of backlash occurs.
#60% chance there is little to no backlash, 30% chance of moderate backlash, 
#10% chance of major backlash.
probs = c(0.60, 0.30, 0.10)
s = sample(levels, size = 10000, replace = TRUE, prob = probs)

#For each level of backlash, how much we expect it to increase the likelihood 
#that total passengers will decrease after the policy changes.
expected_drop = c(low = 0, medium = 0.05, high = 0.1)
impact = expected_drop[s]
simulated_ests = base_est + impact

df = data.frame(simulated_estimates = simulated_ests)
ggplot(df, aes(x = simulated_estimates)) + geom_histogram() + 
  labs(title = 'Updated Forecasts Based on Simulated Public Backlash 
       (low, medium, high)')

#Our new estimate after running our simulation.
new_est = mean(simulated_ests)
cat("updated estimate:", new_est)
```

## Analyzing Q3 Data For Our Reference Classes

```{r}
passengers_data_refcl = passengers_data %>% filter(Year <= 2024) %>% 
  filter(Airline %in% c('JetBlue', 'Frontier', 'Spirit', 'Alaska',
                          'Southwest')) %>% filter(Month %in% c(7, 8, 9)) %>% 
  select(Year, Month, TOTAL, Airline, MonthName)

#Q3 passenger data after implementing the new baggage policy for each
#respective airline.
#(Alaska: May 2010, Spirit: Aug 2010, Frontier: April 2014, JetBlue: June 2015)
spirit_2010 = passengers_data_refcl %>% filter(Airline == 'Spirit') %>% 
  filter(Year >= 2011)
alaska_2010 =  passengers_data_refcl %>% filter(Airline == 'Alaska') %>% 
  filter(Year >= 2010)
jetblue_2015 = passengers_data_refcl %>% filter(Airline == 'JetBlue') %>% 
  filter(Year >= 2015)
frontier_2014 = passengers_data_refcl %>% filter(Airline == 'Frontier') %>% 
  filter(Year >= 2014)

#Find the total passengers in Q3 of an airline for each year.
q3 = function(df) {
 df %>% group_by(Year, Airline) %>% summarize(Q3_total = sum(TOTAL))
}

spirit_q3 = q3(spirit_2010)
alaska_q3 = q3(alaska_2010)
jetblue_q3 = q3(jetblue_2015)
frontier_q3 = q3(frontier_2014)
head(spirit_q3, 5)
 
#Visualizations
jetblue_plot = ggplot(jetblue_q3, aes(x = factor(Year), y = Q3_total)) + 
  geom_col() +
  labs (title = 'JetBlue Q3 Total Passengers After Policy Change', x = 'Year', 
        y = 'Q3 Total')

spirit_plot = ggplot(spirit_q3, aes(x = factor(Year), y = Q3_total)) + 
  geom_col() + labs (title = 'Spirit Q3 Total Passengers After Policy Change', 
                     x = 'Year', y = 'Q3 Total')

frontier_plot = ggplot(frontier_q3, aes(x = factor(Year), y = Q3_total)) + 
  geom_col() + 
  labs (title = 'Frontier Q3 Total Passengers After Policy Change', x = 'Year', 
        y = 'Q3 Total')

alaska_plot = ggplot(alaska_q3, aes(x = factor(Year), y = Q3_total)) + 
  geom_col() +
  labs (title = 'Alaska Q3 Total Passengers After Policy Change', x = 'Year', 
        y = 'Q3 Total')

jetblue_plot
spirit_plot
frontier_plot
alaska_plot
```

## Q3: Observations

```{r}
#In each airline we observe an increasing trend. Following each airline's 
#respective policy change, the total passengers in Q3 has increased every year.
#This suggests that implementing baggage fees does not lead to a decline in
#total passengers at the end of Q3.
```

## Q3: Base Estimate

```{r}
#Base Estimate

#Recall Laplace's rule of succession. 

#Our estimate of Southwest experiencing a decrease in total passengers 
#at the end of Q3 after changing policies is 1/(4+2) = 1/6 = 16.67%

ref_cl_est = 0.1667
cat('base estimate:', ref_cl_est)
```

## Q3: Updating This Estimate to Include the Impact of Public Backlash

```{r}
set.seed(100)
#Our base estimate that there will be a decrease in total passengers at the
#end of Q3 for Southwest after policy changes.
base_est = ref_cl_est

#Whether there will be a low, medium, or high level of public backlash.
levels = c('low', 'medium','high')

#Our belief of the probability each level of backlash occurs.
#60% chance there is little to no backlash, 30% chance of moderate backlash,
#10% chance of major backlash.
probs = c(0.60, 0.30, 0.10)
s = sample(levels, size = 10000, replace = TRUE, prob = probs)

#For each level of backlash, how much we expect it to increase the likelihood 
#that total passengers will decrease after the policy changes.
expected_drop = c(low = 0, medium = 0.05, high = 0.1)
impact = expected_drop[s]
simulated_ests = base_est + impact

df = data.frame(simulated_estimates = simulated_ests)
ggplot(df, aes(x = simulated_estimates)) + geom_histogram() + 
  labs(title = 'Updated Forecasts Based on Simulated Public Backlash
       (low, medium, high)')

#Our new estimate after running our simulation.
new_est = mean(simulated_ests)
cat("updated estimate:", new_est)
```

## Identifying distribution using MLE

## By Ari Hadjiyianni

```{r}
# Use AIC and BIC to find the best fit for the data
library(fitdistrplus)
library(MASS)
```

```{r}

sw_passengers <- passengers_data %>% filter(Airline == "Southwest")
sw_passengers_june <- sw_passengers %>% 
  filter(Year >= 2003 & Year < 2020 | Year >= 2022 & Year != 2025, Month == 6) 
sw_passengers_june$TOTAL <- gsub("[\\,]", "", sw_passengers_june$TOTAL) 
sw_passengers_june$TOTAL<- as.numeric(sw_passengers_june$TOTAL)
sw_passengers_june <- sw_passengers_june[c("Year", "Month", "DOMESTIC", "INTERNATIONAL", "TOTAL")]

```

```{r}
mean = mean(sw_passengers_june$TOTAL)
sd = sd(sw_passengers_june$TOTAL) 

true_data <- ggplot(sw_passengers_june, aes(x = factor(Year), y = TOTAL/1000000)) + 
  geom_col() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  labs(x = "Year", y = "Total (in millions)",
        title = "Total Southwest Passengers (ex-COVID)")

print(true_data)
```

```{r}
# fitting different distributions to find the best one
# normal, lognormal, poisson

# adding weights since more recent years will be more relevant, i.e, there were less travels as a whole in the early 2000

# using quadratic weights, linear is not "aggressive" enough and exponetial puts too much weight on recent years. 
suppressWarnings({
  

weights <- (1:length(total))^2
sum <-  sum(weights)

norm_weights <- weights/sum

total = sw_passengers_june$TOTAL

norm <- fitdist(total, "norm") # bell shaped data
lognorm <- fitdist(total, "lnorm") # skewed data 
poisson <- fitdist(total, "pois") #counts etc. 

aic <- rep(0, 3)
bic <- rep(0, 3)

list <- list(norm, lognorm, poisson)
for (i in 1:3){
  stat <- gofstat(list[[i]])
  aic[i] = stat$aic
  bic[i] = stat$bic
}

fit_df <- data.frame(
  distribution = c("norm", "lognorm", "possion"), 
  AIC = aic, 
  BIC = bic
)

min_aic = fit_df$distribution[fit_df$AIC == min(fit_df$AIC)]
min_bic = fit_df$distribution[fit_df$BIC == min(fit_df$BIC)]

# log norm has the smallest AIC and BIC so it is the best fit distribution. 

# use weights

log_data <- log(total)

mu = sum(norm_weights * log_data)

sigma <-sqrt(norm_weights *(log_data - mu)^2)
})
```

```{r}
# log_data
suppressWarnings({
  

df <- data.frame(
  lg_passengers = log_data, index=c(1:19))

model <- lm(lg_passengers ~ index, data = df, weights = norm_weights)

june_2025 <- data.frame(index = 21)

prediction <- predict(model, newdata = june_2025, se.fit = TRUE)

mu_log <- prediction$fit
se_log <- prediction$se.fit

mu_pred <-  exp(mu_log + sigma^2/2) #using expectation of lognorm
mean_mu_pred <-  mean(mu_pred)
variance <- se_log^2 + sigma^2
se <- sqrt(variance)

# simulations for confidence interval predictions in june 2025

set.seed(613)

n <- 10000

N_log <- rnorm(n, mu_log, se)

N_pred <-  exp(N_log + sigma^2/2) 

lower <-  quantile(N_pred, 0.025)
upper <- quantile(N_pred, 0.975)
})

print(paste0("95% Confidence Interval for June 2025 Passengers:", round(lower, digits = 0), " to ", round(upper, digits = 0)))
print(paste0("Mean of 95% confidence interval:", round(mean_mu_pred, digits = 0)))



```

```{r}
# Third quarter simulation 


sw_passengers_quarter <- sw_passengers %>% 
  filter(Year >= 2003 & Year < 2020 | Year >= 2022 & Year != 2025, Month %in% c(7, 8, 9)) 
sw_passengers_quarter$TOTAL <- gsub("[\\,]", "", sw_passengers_quarter$TOTAL) 
sw_passengers_quarter$TOTAL<- as.numeric(sw_passengers_quarter$TOTAL) 

sw_passengers_quarter <- sw_passengers_quarter %>% 
  group_by(Year) %>% 
  summarize(total = sum(TOTAL))

mean = mean(sw_passengers_quarter$total)
sd = sd(sw_passengers_quarter$total) 

true_data <- ggplot(sw_passengers_quarter, aes(x = factor(Year), y = total/1000000)) + 
  geom_col() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  labs(x = "Year", 
        y = "Total Passengers (in millions)",
       title = "Q3 Southwest Passengers")
print(true_data)
```

```{r}
# fitting different distributions to find the best one
# normal, lognormal, poisson

# adding weights since more recent years will be more relevant, i.e, there were less travels as a whole in the early 2000

# using quadratic weights, linear is not "aggressive" enough and exponetial puts too much weight on recent years. 
suppressWarnings({
  
weights <- (1:length(sw_passengers_quarter$total))^2
sum <-  sum(weights)

norm_weights <- weights/sum

totals = sw_passengers_quarter$total

norm <- fitdist(totals, "norm") # bell shaped data
lognorm <- fitdist(totals, "lnorm") # skewed data 
poisson <- fitdist(totals, "pois") #counts etc. 

aic <- rep(0, 3)
bic <- rep(0, 3)

list <- list(norm, lognorm, poisson)
for (i in 1:3){
  stat <- gofstat(list[[i]])
  aic[i] = stat$aic
  bic[i] = stat$bic
}

fit_df <- data.frame(
  distribution = c("norm", "lognorm", "possion"), 
  AIC = aic, 
  BIC = bic
)

min_aic = fit_df$distribution[fit_df$AIC == min(fit_df$AIC)]
min_bic = fit_df$distribution[fit_df$BIC == min(fit_df$BIC)]

# log norm has the smallest AIC and BIC so it is the best fit distribution. 

# use weights

log_data <- log(totals)

mu = sum(norm_weights * log_data)

sigma <-sqrt(norm_weights *(log_data - mu)^2)

df <- data.frame(
  lg_passengers = log_data, 
  index = c(1:19)
#  index = c(1:17, 18:20)
)

model <- lm(lg_passengers ~ index, data = df, weights = norm_weights)

quarter_2025 <- data.frame(index = 21)

prediction <- predict(model, newdata = quarter_2025, se.fit = TRUE)

mu_log <- prediction$fit
se_log <- prediction$se.fit

mu_pred <-  exp(mu_log + sigma^2/2) #using expectation of lognorm
mean_mu_pred <-  mean(mu_pred)
variance <- se_log^2 + sigma^2
se <- sqrt(variance)

# simulations for confidence interval predictions in june 2025

set.seed(613)

n <- 10000

N_log <- rnorm(n, mu_log, se)

N_pred <-  exp(N_log + sigma^2/2) 

lower <-  quantile(N_pred, 0.025)
upper <- quantile(N_pred, 0.975)
})

print(paste0("95% Confidence Interval for third quarter 2025 Passengers: ", round(lower, digits = 0), " to ", round(upper, digits = 0), sep = ""))
print(paste0("Mean of 95% confidence interval: ", round(mean_mu_pred, digits = 0)))

```
